{"name":"TRAPpy","tagline":"Trace Analysis And Plotting in Python ","body":"# What is TRAPpy?\r\n\r\nTRAPpy is a framework written in python for analysing and plotting [FTrace](http://elinux.org/Ftrace) data by converting it into standardised [PANDAS](http://pandas.pydata.org) DataFrames. The goal is to allow developers easy and systematic access to FTrace data and leverage the flexibility of PANDAS for the analysis.\r\n\r\n# Trace Events and Run Objects\r\n\r\nAn event maps an FTrace event to a single DataFrame in the Run object. One can also create events based on custom trace_printks from within the kernel.  \r\n\r\n## Creating a Run object\r\n\r\n    run = trappy.Run(\"path/to/trace/file\")\r\n\r\n## Registering an Event with TRAPpy\r\n\r\nConsider the following trace_printk from within the kernel.\r\n\r\n\ttrace_pritnk(\"my_csutom_event: key1=%s key2=%d\", value_1, value_2);\r\n\r\nWhich produces the following trace output:\r\n\r\n    kworker/6:1-459   [006]  2806.211584: my_custom_event:     key1=some_string key2=10\r\n\r\nThis event can then be registered in TRAPpy as follows:\r\n\r\n    trappy.register_dynamic(\"event_name\", \"my_custom_event\")\r\n\r\nAnd will be available in the run object as follows:\r\n\r\n    run.event_name.data_frame\r\n\r\n# Plotting the trace\r\n\r\n\r\n\r\n# TRAPpy: Plotter\r\n\r\nTRAPpy's plotter provides an interface to create plots which can span multiple runs, events, columns. It also provides pivoting and filtering capabilities.\r\nHere is the general structure the plotter:\r\n\r\n\r\nSome examples of plots created by TRAPpy: \r\n\r\n## LinePlot\r\n\r\n\r\n## ILinePlot\r\n\r\nThe interactive line plots use [dygraphs](http://dygraphs.com). \r\n\r\n## EventPlot\r\n\r\nThe event plot can be used for the creation of a timeline for multiple event's that follow a start-stop semantic. TRAPpy provides a rudimentary kernelshark like plot of the trace as follows:\r\n\r\n    trappy.plotter.plot_trace(\"/path/to/trace/file\")\r\n\r\nFor more detailed information on how to use plotter you can read the documentation notebook [here](http://FILLL)\r\n\r\n# TRAPpy: Stats\r\n\r\nThe statistic framework is an API designed to aggregate and operate on data. Stats provides a simple grammar which uses the event and underlying data.\r\n\r\n[BART](http://github.com/ARM-software/bart) is an opensource framework which uses the TRAPpy's stats module to provide behavioural assertions for the Linux scheduler and also some example usages for the Linux thermal framework.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}